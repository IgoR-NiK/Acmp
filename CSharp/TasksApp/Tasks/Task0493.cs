using System;

namespace TasksApp.Tasks
{
    /// <summary>
    /// Задача 493 - "Морской бой - 2"
    /// (Время: 1 сек. Память: 16 Мб Сложность: 21%)
    /// 
    /// «Морской бой» - игра для двух участников, в которой игроки по очереди называют координаты на неизвестной им карте соперника.
    /// Если у соперника по этим координатам имеется корабль, то корабль или его часть «топится»,
    /// а попавший получает право сделать еще один ход. Цель игрока - первым поразить все корабли противника.
    ///
    /// «Морской бой» очень популярен среди учеников одной физико-математической школы.
    /// Ребята очень любят в него играть на переменах. Вот и сейчас ученики Иннокентий и Емельян начали новую партию.
    ///
    /// Правила, по которым ребята расставляют корабли перед началом партии, несколько отличаются от классических.
    /// Во-первых, игра происходит на поле размером N×M, а не 10×10. Во-вторых, число кораблей, их размер
    /// и форма выбираются ребятами перед партией - так играть намного интереснее.
    ///
    /// Емельян уже расставил все свои корабли, кроме одного однопалубного.
    /// Такой корабль занимает ровно одну клетку.
    ///
    /// Задана расстановка кораблей Емельяна. Найдите число способов поставить оставшийся однопалубный корабль.
    /// При этом учитывайте, что по правилам его можно ставить только в ту клетку,
    /// все соседние с которой не заняты. В этой задаче соседними считаются клетки, имеющие общую сторону.
    /// 
    /// Входные данные
    /// Первая строка входного файла INPUT.TXT содержит два числа: N и M (1 ≤ N, M ≤ 100).
    /// Последующие N строк описывают игровое поле - каждая из них содержит M символов.
    /// Символом «.» (точка) обозначена свободная клетка, символом «*» (звездочка) - занятая кораблем.
    /// 
    /// Выходные данные
    /// В выходной файл OUTPUT.TXT выведите ответ на задачу.
    /// </summary>   
    public class Task0493
    {
        public static void Main()
        {
            GetInputData(out var field);

            var result = Solve(field);

            PrintResult(result);
        }

        private static void GetInputData(out char[,] field)
        {
            var str = Console.ReadLine().Split();
            
            var n = int.Parse(str[0]);
            var m = int.Parse(str[1]);

            field = new char[n, m];
            for (var i = 0; i < n; i++)
            {
                var input = Console.ReadLine();
                for (var j = 0; j < m; j++)
                {
                    field[i, j] = input[j];
                }
            }
        }

        public static int Solve(char[,] field)
        {
            var result = 0;

            var n = field.GetLength(0);
            var m = field.GetLength(1);
            for (var i = 0; i < n; i++)
            {
                for (var j = 0; j < m; j++)
                {
                    if (field[i, j] == '.')
                    {
                        if ((i - 1 < 0 || field[i - 1, j] == '.')
                            && (i + 1 >= n || field[i + 1, j] == '.')
                            && (j - 1 < 0 || field[i, j - 1] == '.')
                            && (j + 1 >= m || field[i, j + 1] == '.'))
                            result++;
                    }
                }
            }
            
            return result;
        }

        private static void PrintResult(int result)
        {
            Console.WriteLine(result);
        }
    }
}