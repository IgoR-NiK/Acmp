using System;

namespace TasksApp.Tasks
{
    /// <summary>
    /// Задача 208 - "Забавная игра"
    /// (Время: 1 сек. Память: 16 Мб Сложность: 30%)
    /// 
    /// Легендарный учитель математики Юрий Петрович придумал забавную игру с числами.
    /// А именно, взяв произвольное целое число, он переводит его в двоичную систему счисления,
    /// получая некоторую последовательность из нулей и единиц, начинающуюся с единицы.
    /// (Например, десятичное число 19(10) = 1*2^4+0*2^3+0*2^2+1*2^1+1*2^0 в двоичной системе запишется как 100112.)
    /// Затем учитель начинает сдвигать цифры полученного двоичного числа по циклу
    /// (так, что последняя цифра становится первой, а все остальные сдвигаются на одну позицию вправо),
    /// выписывая образующиеся при этом последовательности из нулей и единиц в столбик — он подметил,
    /// что независимо от выбора исходного числа получающиеся последовательности начинают с некоторого момента повторяться.
    /// И, наконец, Юрий Петрович отыскивает максимальное из выписанных чисел и переводит его обратно в десятичную систему счисления,
    /// считая это число результатом проделанных манипуляций. Так, для числа 19 список последовательностей будет таким:
    /// 10011
    /// 11001
    /// 11100
    /// 01110
    /// 00111
    /// 10011
    /// ...
    /// и результатом игры, следовательно, окажется число 1*2^4+1*2^3+1*2^2+0*2^+0*2^0 = 28.
    ///
    /// Поскольку придуманная игра с числами все больше занимает воображение учителя, отвлекая тем самым его от работы с ну очень одаренными школьниками,
    /// Вас просят написать программу, которая бы помогла Юрию Петровичу получать результат игры без утомительных ручных вычислений.
    /// 
    /// Входные данные
    /// Входной файл INPUT.TXT содержит одно целое число N (0 ≤ N ≤ 32767).
    /// 
    /// Выходные данные
    /// Ваша программа должна вывести в выходной файл OUTPUT.TXT одно целое число, равное результату игры.
    /// </summary>
    public static class Task0208 
    {
        public static void Main()
        {            
            GetInputData(out var n);

            var result = Solve(n);

            PrintResult(result);  
        }

        private static void GetInputData(out int n)
        {
            n = int.Parse(Console.ReadLine());
        }

        public static int Solve(int n)
        {
            var max = n;
            var binary = Convert.ToString(n, 2);

            for (var i = 0; i < binary.Length - 1; i++)
            {
                binary = Shift(binary);
                max = Math.Max(Convert.ToInt32(binary, 2), max);
            }

            return max;
        }

        private static void PrintResult(int result)
        {
            Console.Write(result);
        }

        private static string Shift(string input)
        {
            return $"{input[input.Length - 1]}{input.Substring(0, input.Length - 1)}";
        }
    }
}