using System;

namespace TasksApp.Tasks
{
    /// <summary>
    /// Задача 234 - "Сапер"
    /// (Время: 1 сек. Память: 16 Мб Сложность: 28%)
    /// 
    /// Мальчику Васе очень нравится известная игра "Сапер" ("Minesweeper").
    ///
    /// В "Сапер" играет один человек. Игра идет на клетчатом поле (далее будем называть его картой) N×M (N строк, M столбцов).
    /// В K клетках поля стоят мины, в остальных клетках записано либо число от 1 до 8 — количество мин в соседних клетках,
    /// либо ничего не написано, если в соседних клетках мин нет. Клетки являются соседними, если они имеют хотя бы одну общую точку,
    /// в одной клетке не может стоять более одной мины. Изначально все клетки поля закрыты. Игрок за один ход может открыть какую-нибудь клетку.
    /// Если в открытой им клетке оказывается мина — он проигрывает, иначе игроку показывается число, которое стоит в этой клетке,
    /// и игра продолжается. Цель игры — открыть все клетки, в которых нет мин.
    ///
    /// У Васи на компьютере есть эта игра, но ему кажется, что все карты, которые в ней есть, некрасивые и неинтересные.
    /// Поэтому он решил нарисовать свои. Однако фантазия у него богатая, а времени мало, и он хочет успеть нарисовать как можно больше карт.
    /// Поэтому он просто выбирает N, M и K и расставляет мины на поле, после чего все остальные клетки могут быть однозначно определены.
    /// Однако на определение остальных клеток он не хочет тратить свое драгоценное время. Помогите ему!
    ///
    /// По заданным N, M, K и координатам мин восстановите полную карту.
    /// 
    /// Входные данные
    /// В первой строке входного файла INPUT.TXT содержатся числа N, M и K (1 ≤ N ≤ 200, 1 ≤ M ≤ 200, 0 ≤ K ≤ N×M).
    /// Далее идут K строк, в каждой из которых содержится по два числа, задающих координаты мин.
    /// Первое число в каждой строке задает номер строки клетки, где находится мина, второе число — номер столбца.
    /// Левая верхняя клетка поля имеет координаты (1,1), правая нижняя — координаты (N,M).
    /// 
    /// Выходные данные
    /// Выходной файл OUTPUT.TXT должен содержать N строк по M символов — соответствующие строки карты.
    /// j-й символ i-й строки должен содержать символ ‘*‘ (звездочка) если в клетке (i,j) стоит мина,
    /// цифру от 1 до 8, если в этой клетке стоит соответствующее число, либо ‘.‘ (точка), если клетка (i,j) пустая.
    /// </summary>
    public static class Task0234
    {
        public static void Main()
        {
            GetInputData(out var field);

            var result = Solve(field);

            PrintResult(result);  
        }

        private static void GetInputData(out int[][] field)
        {
            var str = Console.ReadLine().Split();
            
			var n = int.Parse(str[0]);
            var m = int.Parse(str[1]);
            var k = int.Parse(str[2]);
            
            field = new int[n][];
            for (var i = 0; i < n; i++)
            {
                field[i] = new int[m];
            }

            for (var z = 0; z < k; z++)
            {
                var point =  Console.ReadLine().Split();

                var i = int.Parse(point[0]) - 1;
                var j = int.Parse(point[1]) - 1;

                field[i][j] = -1;
            }
        }

        public static int[][] Solve(int[][] field)
        {
            for (var i = 0; i < field.Length; i++)
            {
                for (var j = 0; j < field[i].Length; j++)
                {
                    if (field[i][j] == -1)
                    {
                        Check(field, i - 1, j - 1);
                        Check(field, i - 1, j);
                        Check(field, i - 1, j + 1);
                        Check(field, i, j + 1);
                        Check(field, i + 1, j + 1);
                        Check(field, i + 1, j);
                        Check(field, i + 1, j - 1);
                        Check(field, i, j - 1);
                    }
                }
            }

            return field;
        }

        private static void PrintResult(int[][] result)
        {
            foreach (var row in result)
            {
                foreach (var column in row)
                {
                    var ch = column == -1
                        ? '*'
                        : column == 0
                            ? '.'
                            : (char)('0' + column);
                    
                    Console.Write(ch);
                }

                Console.WriteLine();
            }
        }

        private static void Check(int[][] field, int i, int j)
        {
            if (i < 0 || i >= field.Length || j < 0 || j >= field[i].Length)
            {
                return;
            }

            if (field[i][j] != -1)
            {
                field[i][j]++;
            }
        }
    }
}