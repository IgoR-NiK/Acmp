using System;

namespace TasksApp.Tasks
{
    /// <summary>
	/// Задача 39 - "Волосатый бизнес"
    /// (Время: 1 сек. Память: 16 Мб Сложность: 32%)
    /// 
	/// Одного неформала выгнали с работы, и теперь ему надо как-то зарабатывать себе на жизнь. 
	/// Поразмыслив, он решил, что сможет иметь очень неплохие деньги на продаже собственных волос. 
	/// Известно, что пункты приема покупают волосы произвольной длины стоимостью С у.е. за каждый сантиметр. 
	/// Так как волосяной рынок является очень динамичным, то цена одного сантиметра волос меняется каждый день как и курс валют. 
	/// Неформал является очень хорошим бизнес-аналитиком. Он смог вычислить, какой будет цена одного сантиметра волос в каждый из ближайших N дней 
	/// (для удобства пронумеруем дни в хронологическом порядке от 0 до N-1). Теперь он хочет определить, в какие из этих дней ему следует продавать волосы, 
	/// чтобы по истечению всех N дней заработать максимальное количество денег. Заметим, что волосы у неформала растут только ночью и вырастают 
	/// на 1 сантиметр за ночь. Следует также учесть, что до 0-го дня неформал с горя подстригся наголо и к 0-му дню длина его волос составляла 1 сантиметр.
    /// 
    /// Входные данные
	/// В первой строке входного файла INPUT.TXT записано целое число N (0 &lt; N ≤ 100). 
	/// Во второй строке через пробел заданы N натуральных чисел, не превосходящих 100, соответствующие стоимости C[i] 1 сантиметра волос за каждый i-й день.
    /// 
    /// Выходные данные
	/// В единственную строку выходного файла OUTPUT.TXT нужно вывести максимальную денежную сумму, которую может заработать неформал за N дней.
    /// </summary>
	public class Task0039
	{
		public static void Main()
		{
			GetInputData(out var prices);

			var result = Solve(prices);

			PrintResult(result);
		}

		private static void GetInputData(out int[] prices)
		{
			int.TryParse(Console.ReadLine(), out var n);
			var input = Console.ReadLine()?.Split();

			prices = new int[n];
			for (var i = 0; i < n; i++)
			{
				int.TryParse(input?[i], out prices[i]);
			}
		}

		public static int Solve(int[] prices)
		{
			var result = 0;
			var k = -1;
			var kp = -1;

			while (k != prices.Length - 1) 
			{
				var max = 0;
				for (var i = k + 1; i < prices.Length; i++)
				{
					if (prices[i] > max)
					{
						max = prices[i];
						k = i;
					}
				}
				var d = k - kp;
				kp = k;
				result += max * d;
			}

			return result;
		}

		private static void PrintResult(int result)
		{
			Console.WriteLine(result);
		}
	}
}