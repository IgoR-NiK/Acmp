using System;

namespace TasksApp.Tasks
{
    /// <summary>
    /// Задача 446 - "Табло"
    /// (Время: 1 сек. Память: 16 Мб Сложность: 20%)
    /// 
    /// На хоккейном стадионе в одном большом городе расположено большое прямоугольное табло.
    /// Оно имеет n строк и m столбцов (то есть состоит из n x m ячеек).
    /// Во время хоккейного матча это табло служит для отображения счета и времени,
    /// прошедшего с начала тайма, а в перерывах на нем показывают различную рекламу.
    ///
    /// В связи с этим возникла задача проверки возможности показа на этом табло определенной рекламной заставки.
    /// Заставка также, как и табло, имеет размер n строк на m столбцов. Каждая из ячеек заставки окрашена
    /// в один из четырех цветов - трех основных: красный - R, зеленый - G, синий - B и черный - .(точка).
    ///
    /// Каждая из ячеек табло характеризуется своими цветопередаточными возможностями.
    /// Любая из ячеек табло может отображать черный цвет - это соответствует тому, что на нее вообще не подается напряжение.
    /// Также каждая из ячеек может отображать некоторое подмножество множества основных цветов.
    /// В этой задаче эти подмножества будут кодироваться следующим образом:
    ///
    /// 0 - ячейка может отображать только черный цвет;
    /// 1 - ячейка может отображать только черный и синий цвета;
    /// 2 - ячейка может отображать только черный и зеленый цвета;
    /// 3 - ячейка может отображать только черный, зеленый и синий цвета;
    /// 4 - ячейка может отображать только черный и красный цвета;
    /// 5 - ячейка может отображать только черный, красный и синий цвета;
    /// 6 - ячейка может отображать только черный, красный и зеленый цвета;
    /// 7 - ячейка может отображать только черный, красный, зеленый и синий цвета.
    ///
    /// Напишите программу, которая по описанию табло и заставки определяет: возможно ли на табло отобразить эту заставку. 
    ///
    /// Входные данные
    /// Первая строка входного файла INPUT.TXT содержит целые числа n и m (1 ≤ n, m ≤ 100).
    /// Далее идут n строк по m символов каждая - описание заставки.
    /// Каждый из символов описания заставки принадлежит множеству {R, G, B, .} . Их значения описаны выше.
    ///
    /// После этого идет описание табло. Оно содержит n строк по m чисел, разделенных пробелами. Значения чисел описаны выше.
    /// 
    /// Выходные данные
    /// В выходной файл OUTPUT.TXT выведите YES, если на табло возможно отобразить заставку и NO - в противном случае.
    /// </summary>
    public class Task0446
    {
        public static void Main()
        {
            GetInputData(out var splash, out var board );

            var result = Solve(splash, board);

            PrintResult(result);
        }

        private static void GetInputData(out char[,] splash, out int[,] board)
        {
            var input = Console.ReadLine();
            var n = int.Parse(input.Split()[0]);
            var m = int.Parse(input.Split()[1]);

            splash = new char[n, m];
            for (var i = 0; i < n; i++)
            {
                input = Console.ReadLine();
                for (var j = 0; j < m; j++)
                {
                    splash[i, j] = input[j];
                }               
            }

            board = new int[n, m];
            for (var i = 0; i < n; i++)
            {
                input = Console.ReadLine();
                for (var j = 0; j < m; j++)
                {
                    board[i, j] = int.Parse(input.Split()[j]);
                }               
            }
        }

        public static string Solve(char[,] splash, int[,] board)
        {
            var n = splash.GetLength(0);
            var m = splash.GetLength(1);

            for (var i = 0; i < n; i++)
            {
                for (var j = 0; j < m; j++)
                {
                    switch (board[i, j])
                    {
                        case 0:
                            if (splash[i, j] != '.') return "NO";
                            break;
                        case 1:
                            if (splash[i, j] != '.' && splash[i, j] != 'B') return "NO";
                            break;
                        case 2:
                            if (splash[i, j] != '.' && splash[i, j] != 'G') return "NO";
                            break;
                        case 3:
                            if (splash[i, j] == 'R') return "NO";
                            break;
                        case 4:
                            if (splash[i, j] != '.' && splash[i, j] != 'R') return "NO";
                            break;
                        case 5:
                            if (splash[i, j] == 'G') return "NO";
                            break;
                        case 6:
                            if (splash[i, j] == 'B') return "NO";
                            break;
                    }
                }
            }

            return "YES";
        }

        private static void PrintResult(string result)
        {
            Console.Write(result);
        }
    }
}