using System;

namespace TasksApp.Tasks
{
    /// <summary>
    /// Задача 233 - "Автобусная экскурсия"
    /// (Время: 1 сек. Память: 16 Мб Сложность: 14%)
    /// 
    /// Оргкомитет Московской городской олимпиады решил организовать обзорную экскурсию по Москве для участников олимпиады.
    /// Для этого был заказан двухэтажный автобус (участников олимпиады достаточно много и в обычный они не умещаются)
    /// высотой 437 сантиметров. На экскурсионном маршруте встречаются N мостов. Жюри и оргкомитет олимпиады очень
    /// обеспокоены тем, что высокий двухэтажный автобус может не проехать под одним из них. Им удалось выяснить точную
    /// высоту каждого из мостов. Автобус может проехать под мостом тогда и только тогда, когда высота моста превосходит
    /// высоту автобуса.
    ///
    /// Помогите организаторам узнать, закончится ли экскурсия благополучно, а если нет, то установить, где произойдет авария.
    /// 
    /// Входные данные
    /// Во входном файле INPUT.TXT сначала содержится число N (1 ≤ N ≤ 1000). Далее идут N натуральных чисел,
    /// не превосходящих 10000 - высоты мостов в сантиметрах в том порядке, в котором они встречаются на пути автобуса.
    /// 
    /// Выходные данные
    /// В единственную строку выходного файла OUTPUT.TXT нужно вывести фразу "No crash", если экскурсия закончится благополучно.
    /// Если же произойдет авария, то нужно вывести сообщение "Crash k", где k - номер моста, где произойдет авария.
    /// Фразы выводить без кавычек ровно с одним пробелом внутри.
    /// </summary>
    public static class Task0233 
    {
        public static void Main()
        {            
            GetInputData(out var n, out var heights);

            var result = Solve(n, heights);

            PrintResult(result);  
        }

        private static void GetInputData(out int n, out int[] heights)
        {
			n = int.Parse(Console.ReadLine());
            var input = Console.ReadLine().Split();
            
            heights = new int[n];
            for (var i = 0; i < input.Length; i++)
                heights[i] = int.Parse(input[i]);
        }

        public static string Solve(int n, int[] heights)
        {
            for (var i = 0; i < n; i++)
            {
                if (heights[i] <= 437)
                {
                    return $"Crash {i + 1}";
                }
            }

            return "No crash";
        }

        private static void PrintResult(string result)
        {
            Console.Write(result);
        }
    }
}